//Procedure which returns the type of product with the cost less than the given cost
create or replace procedure cost_filter(c in number,t in varchar)
is
cs product.cost%type;
ty product.type%type;
id product.product_id%type;
cursor cf is
select product_id,cost,type from product where cost<c and type=t;
begin
open cf;
loop
fetch cf into id,cs,ty;
exit when cf%notfound;
dbms_output.put_line('Product' || id || 'has cost ' || cs || ' and the type is' || ty);
end loop;
close cf;
exception
when no_data_found then
dbms_output.put_line('Sorry no such products exist');
end;
//Local Block
declare
c number(7);
t varchar(20);
begin
c:= &Enter_Cost;
t:=&Enter_typeofproduct;
cost_filter(c,t);
End;

//Function which returns total number of products which a particular seller sells
create or replace function totalProducts(sId in varchar)
return number
is total number(2):=0;
begin
return total;
End;
Function execution:
declare c number(2);
begin c:=totalProducts('sid102');
dbms_output.put_line('Total products is : '|| c);
End;

Procedure which returns the total quantity of product with the given ID
Procedure with exception handling
create or replace procedure prod_details(p_id in varchar)
is quan number(2);
begin
select quantity into quan from product where product_id=p_id;
exception when no_data_found then
dbms_output.put_line('Sorry no such product exist !!');
End;

Local Block
declare pid varchar(10);
begin
pid:=&Enter_Productid;
prod_details(pid);
End;
Function to count number of cart items
create or replace function numCartId(cd in varchar)
return number is total number(2):=0;
begin
select count(*) into total from cart_item where cart_id=cd;
return total;
end;
30
Local Block
declare
cid varchar(10);
cnt number(4);
begin
cid:=&Enter_Carttid;
cnt:=numCartId(cid);
dbms_output.put_line('Total products are : '|| cnt);
End;
Triggers
Trigger that will execute before inserting new customer to database and inserting a new
cartId to the cart_items table
Create or replace trigger before_customer
before insert
on customer
for each row
declare
c varchar(10);
n number(2);


select count(*) into total from product where seller_id=sId;

begin c:= :new.cart_id;
n:=numCartId(c);
if n>0 then dbms_output.put_line('Sorry');
end if;
insert into cart values(c);
end;

create or replace function total_cost(cId in varchar)
return number
is total number(2) :=0;
begin
select sum(cost) into total from product,cart_item where product.product_id=cart_item.product_id
and cart_id=cId;
return total;


Trigger to update the total amount of user everytime he adds something to payment table
create or replace trigger before_pay_up
before insert
on
payment
for each row
declare total number(3);
begin total :=total_cost(:new.cart_id);
insert into payment
values(:new.payment_id,:new.payment_date,:new.payment_type,:new.customer_id,:new.cart_id,
total);
End;
